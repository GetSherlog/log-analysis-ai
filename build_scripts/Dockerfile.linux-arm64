FROM --platform=linux/arm64 ubuntu:22.04 AS builder

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Install basic dependencies
RUN apt-get update && apt-get install -y \
    git cmake g++ make libssl-dev zlib1g-dev \
    libjsoncpp-dev uuid-dev libmariadb-dev wget curl \
    libcurl4-openssl-dev \
    libboost-all-dev python3 ninja-build pkg-config unzip \
    python3-pip nlohmann-json3-dev libjemalloc-dev \
    libgoogle-glog-dev libgflags-dev liblz4-dev libleveldb-dev \
    libtbb-dev libhiredis-dev libspdlog-dev libfmt-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Apache Arrow
WORKDIR /tmp/arrow
RUN wget -q https://github.com/apache/arrow/archive/refs/tags/apache-arrow-12.0.0.tar.gz \
    && tar -xf apache-arrow-12.0.0.tar.gz \
    && cd arrow-apache-arrow-12.0.0/cpp \
    && mkdir build && cd build \
    && cmake -DARROW_PARQUET=ON -DARROW_DATASET=ON -DARROW_CSV=ON .. \
    && make -j$(nproc) \
    && make install \
    && ldconfig

# Install Eigen
WORKDIR /tmp/eigen
RUN wget -q https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz \
    && tar -xf eigen-3.4.0.tar.gz \
    && cd eigen-3.4.0 \
    && mkdir build && cd build \
    && cmake .. \
    && make install

# Install Abseil
WORKDIR /tmp/abseil
RUN git clone https://github.com/abseil/abseil-cpp.git \
    && cd abseil-cpp \
    && git checkout 20230125.3 \
    && mkdir build && cd build \
    && cmake -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_CXX_STANDARD=17 \
            -DABSL_ENABLE_INSTALL=ON \
            -DABSL_PROPAGATE_CXX_STD=ON .. \
    && make -j$(nproc) \
    && make install \
    && ldconfig

# Install FastFloat (needed for Folly)
WORKDIR /tmp/fastfloat
RUN git clone https://github.com/fastfloat/fast_float.git \
    && cd fast_float \
    && mkdir build && cd build \
    && cmake .. \
    && make install

# Install gflags from source
WORKDIR /tmp/gflags
RUN git clone https://github.com/gflags/gflags.git \
    && cd gflags \
    && mkdir build && cd build \
    && cmake -DBUILD_SHARED_LIBS=ON \
            -DBUILD_STATIC_LIBS=ON \
            -DBUILD_gflags_LIB=ON \
            -DINSTALL_HEADERS=ON \
            -DINSTALL_SHARED_LIBS=ON \
            -DINSTALL_STATIC_LIBS=ON .. \
    && make -j$(nproc) \
    && make install \
    && ldconfig

# Install Folly
WORKDIR /tmp/folly
RUN apt-get update && apt-get install -y \
    autoconf automake binutils-dev cmake libdwarf-dev \
    libevent-dev libsodium-dev libtool ninja-build \
    libgoogle-glog-dev libboost-all-dev \
    libdouble-conversion-dev liblz4-dev \
    liblzma-dev libzstd-dev libbz2-dev libsnappy-dev \
    python3-pip python3-dev zlib1g-dev zstd pkg-config \
    libfmt-dev libunwind-dev libicu-dev \
    && rm -rf /var/lib/apt/lists/* \
    && git clone https://github.com/facebook/folly && cd folly/build \
    && cmake -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DBUILD_EXAMPLES=OFF \
            -DBUILD_CTL=OFF \
            -DBUILD_TESTING=OFF .. \
    && make all \
    && make install \
    && ldconfig

# Install llama.cpp
WORKDIR /tmp/llama
RUN git clone https://github.com/ggerganov/llama.cpp.git \
    && cd llama.cpp \
    && mkdir build && cd build \
    && cmake -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DLLAMA_NATIVE=OFF \
            -DLLAMA_BUILD_EXAMPLES=OFF \
            -DLLAMA_BUILD_TESTS=OFF .. \
    && make -j$(nproc) \
    && make install \
    && ldconfig

# Install DuckDB
WORKDIR /tmp/duckdb
RUN git clone https://github.com/duckdb/duckdb.git \
    && cd duckdb \
    && mkdir build && cd build \
    && cmake -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON .. \
    && make -j$(nproc) \
    && make install \
    && ldconfig

# Build stage
WORKDIR /app
COPY . .

# Build LogAI library
RUN mkdir -p build && cd build \
    && cmake -DCMAKE_BUILD_TYPE=Release .. \
    && make -j$(nproc) \
    && make install

# Create output directory
RUN mkdir -p /output/bin/linux-arm64 \
    && cp /app/build/bin/linux-arm64/logai /output/bin/linux-arm64/ \
    && mkdir -p /output/lib/linux-arm64 \
    && cp -P /usr/local/lib/lib*.so* /output/lib/linux-arm64/ \
    && cp -P /usr/lib/aarch64-linux-gnu/lib*.so* /output/lib/linux-arm64/ 2>/dev/null || true

# Create a deploy script for the binary
RUN echo '#!/bin/bash\n\
mkdir -p ~/.local/lib\n\
cp ./lib/linux-arm64/*.so* ~/.local/lib/\n\
echo "Libraries copied to ~/.local/lib/"\n\
echo "You may need to run: sudo ldconfig"\n\
chmod +x ./bin/linux-arm64/logai\n\
echo "You can now run the binary with: ./bin/linux-arm64/logai"' > /output/deploy.sh \
    && chmod +x /output/deploy.sh

FROM scratch
COPY --from=builder /output /output 